#!/usr/bin/env python
# Copyright (c) 2015, Ecole Polytechnique Federale de Lausanne, Blue Brain Project
# All rights reserved.
#
# This file is part of NeuroM <https://github.com/BlueBrain/NeuroM>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     1. Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#     2. Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
#     3. Neither the name of the copyright holder nor the names of
#        its contributors may be used to endorse or promote products
#        derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'''Find and the cut plane for the given neuron(s)'''

import argparse
import json
import logging
import sys
from tqdm import tqdm

from neurom import load_neuron
from neurom.apps.cut_plane_detection import find_cut_plane
from neurom.io.utils import get_files_by_path
from neurom.utils import NeuromJSON


L = logging.getLogger(__name__)


def get_parser():
    '''Parse command line arguments'''
    description = ('Cut plane detection: '
                   ' finding the position of the cut plane (X, Y or Z). '
                   'It returns the cut plane and the positions of all cut terminations.')

    parser = argparse.ArgumentParser(description=description)

    parser.add_argument('datapath', nargs='+', type=str,
                        help='Path to a morphology data file or a directory')

    parser.add_argument('-o', '--output', dest='output_file',
                        help=('Output json file name'))

    parser.add_argument('-w', '--width', type=int, default=3,
                        help='The bin width of the 1D distributions')

    parser.add_argument('-v', '--verbose', action='count', dest='verbose', default=0,
                        help='-v for INFO, -vv for DEBUG')

    parser.add_argument('-d', '--display', action='store_true', default=False,
                        help='Display control plots or not')

    return parser


def _check_results(results):
    '''Check the result status'''
    for filename, result in results.items():
        if not result:
            L.error('Empty results for file: %s', filename)
            return -1

        status = result.get('status')
        if status.lower() != 'ok':
            L.warning('Incorrect status: %s', status)
            return 1

        return 0


def main(args):
    '''main function'''
    results = {f: find_cut_plane(load_neuron(f), args.width, args.display)
               for path in args.datapath
               for f in tqdm(get_files_by_path(path))}

    for result in results.values():
        result.pop('figures', None)

    if not args.output_file:
        print('\n')
        for k, v in results.items():
            print('{}: {}'.format(k, v))
    else:
        with open(args.output_file, 'w') as output_file:
            if 'figures' in results:
                del results['figures']
            json.dump(results, output_file, cls=NeuromJSON)

    return _check_results(results)


if __name__ == '__main__':
    _args = get_parser().parse_args()
    logging.basicConfig(level=(logging.WARNING,
                               logging.INFO,
                               logging.DEBUG)[min(_args.verbose, 2)])

    if not _args.datapath:
        get_parser().print_usage()
        sys.exit('Need a "datapath" to operate on')

    main(_args)
    if _args.display:
        import matplotlib.pyplot as plt
        plt.show()
